<snippet>
	<content><![CDATA[

struct BinaryLifting {
    ll n;
    ll maxLog;
    ll maxRequirement;
    vector<vector<ll>> parent;
    BinaryLifting(ll n1, vector<ll> *edges, ll requirement, ll root) {
        n = n1;
        parent.resize(n1+1);  //1 based nodes
        maxLog = log2(requirement + 1);
        maxRequirement = requirement;
        for (ll i = 0; i <= n ; i++) {
            parent[i].resize(maxLog + 1);
            for (ll j = 0; j <= maxLog; j++) {
                parent[i][j] = -1;
            }
        }
        fillParentTable(root, edges);
    }
    void fillParentTable(ll root, vector<ll> *edges) {
        vector<bool> visited(n+1);
        dfsBinaryLifting(root, edges, visited);
        ll intermediate = -1;
        for (ll i = 1; i <= maxLog; i++) {
            for (ll j = 0; j <= n; j++) {
                intermediate = parent[j][i - 1];
                if (intermediate != -1) {
                    parent[j][i] = parent[intermediate][i - 1];
                }
            }
        }
    }
    void dfsBinaryLifting(ll root, vector<ll> *edges, vector<bool> &visited) {
        visited[root] = true;
        for (auto i : edges[root]) {
            if (!visited[i]) {
                parent[i][0] = root;
                dfsBinaryLifting(i, edges, visited);
            }
        }
    }
    ll kthParent(ll x, ll k) {
        for(ll i = 0; i <= maxLog; i++){
            if((k >> i) & 1){ 
                if(x == -1)
                    return x;
                x = parent[x][i];
            }
        }
        return x;
    }
};

struct LCA {
    ll n;
    vector<ll> level;
    LCA(ll n1, vector<ll> *edges, ll root) {
        n = n1;
        level.resize(n+1);
        dfsLCA(root, edges, -1);
    }
    void dfsLCA(ll root, vector<ll> *edges, ll parent) {
        for (auto i : edges[root]) {
            if (i != parent) {
                level[i] = level[root] + 1;
                dfsLCA(i, edges, root);
            }
        }
    }
    ll getLCA(ll a, ll b, BinaryLifting &bl_object) {
        if (level[a] > level[b]) {
            swap(a, b);
        }
        b = bl_object.kthParent(b, level[b] - level[a]);
        if (a == b)
            return a;
        for (ll i = bl_object.maxLog; i >= 0; i--) {
            ll parent1 = bl_object.parent[a][i];
            ll parent2 = bl_object.parent[b][i];
            if (parent2 != parent1 && parent1 != -1 && parent2 != -1) {
                a = parent1;
                b = parent2;
            }
        }
        return bl_object.parent[a][0];
    }
};


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lca</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
